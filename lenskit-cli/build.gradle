/*
 * Build system for LensKit, and open-source recommender systems toolkit.
 * Copyright 2010-2014 Regents of the University of Minnesota and contributors
 * Work on LensKit has been funded by the National Science Foundation under
 * grants IIS 05-34939, 08-08692, 08-12148, and 10-17697.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the
 *   distribution.
 *
 * - Neither the name of the University of Minnesota nor the names of
 *   its contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import org.gradle.process.internal.ExecException
import java.util.zip.ZipFile

apply from: "$rootDir/gradle/maven.gradle"
apply plugin: 'groovy'

dependencies {
    compile project(':lenskit-all')
    compile group: 'net.sourceforge.argparse4j', name: 'argparse4j', version: '0.4.3'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion

    runtime group: 'org.fusesource.jansi', name: 'jansi', version: '1.8'
    runtime group: 'org.slf4j', name: 'jul-to-slf4j', version: slf4jVersion
}

meta {
    name 'LensKit CLI'
    description 'Command-line tools for interacting with LensKit.'
}

// Make LensKit version info available
task versionInfo {
    ext.versionFile = {
        "$sourceSets.main.output.resourcesDir/META-INF/lenskit/version.properties"
    }
    outputs.file versionFile
    inputs.property 'version', version
}
versionInfo << {
    def vf = file(versionFile)
    mkdir vf.parentFile
    vf.text = "lenskit.version=$version\n"
}
classes.dependsOn versionInfo

// Build an application
apply plugin: 'application'

mainClassName = 'org.grouplens.lenskit.cli.Main'
applicationName = 'lenskit'

// We need to be able to start lenskit-eval as well as lenskit
task evalStartScripts(type: CreateStartScripts) {
    applicationName = 'lenskit-eval'
    mainClassName = 'org.grouplens.lenskit.eval.cli.EvalCLI'
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    optsEnvironmentVar = 'LENSKIT_OPTS'
}
applicationDistribution.from(evalStartScripts) {
    into 'bin'
}

// Render the manpages
task renderManPages(group: 'build') {
    ext.manDir = 'src/man'
    ext.outputDir = "$buildDir/man"
    ext.filterScript = 'src/man/filter-manpage.py'
    inputs.source fileTree(manDir) {
        include '*.md'
    }
    inputs.file filterScript
    outputs.dir outputDir
    doLast {
        mkdir outputDir
        for (doc in inputs.sourceFiles.files) {
            def name = doc.name - '.md'
            try {
                exec {
                    executable 'pandoc'
                    args '-Mheader=LensKit'
                    args "-Mfooter=$version"
                    args '-Msection=1'
                    args '-F', file(filterScript)
                    args '-s', '-t', 'man'
                    args '-o', file("$outputDir/$name")
                    args doc
                }
            } catch (ExecException e) {
                logger.warn 'pandoc {}: {}', name, e
                logger.warn 'skipping man page build'
                throw new StopExecutionException("cannot run pandoc")
            }
        }
    }
}
applicationDistribution.from(renderManPages) {
    into 'man'
}

// aggregate license info and notices from dependencies
task notices(group: 'build') {
    ext.noticeFile = "$buildDir/NOTICE.txt"
    inputs.files configurations.runtime
    outputs.file noticeFile

    doLast {
        def cfg = configurations.runtime.resolvedConfiguration
        file(noticeFile).withPrintWriter { out ->
            out.println("This file contains the notices required by the libraries used by LensKit.")
            out.println()

            cfg.resolvedArtifacts*.file.each { File jar ->
                def zip = new ZipFile(jar)
                try {
                    def noticeEntry = zip.getEntry("META-INF/NOTICE.txt")
                    if (noticeEntry != null) {
                        def notice = zip.getInputStream(noticeEntry).text
                        out.println("${jar.name}:")
                        notice.eachLine { line ->
                            out.println("    ${line}")
                        }
                        out.println()
                    }
                } finally {
                    zip.close()
                }
            }
        }
    }
}
applicationDistribution.from(notices)
// copy license texts into the distribution
applicationDistribution.from('src/licenses')
// include aggregate javadoc
applicationDistribution.from(rootProject.tasks['javadoc']) {
    into 'javadoc'
}

// make standard tasks build the application
build.dependsOn installApp
assemble.dependsOn distZip, distTar
