/*
 * Build system for LensKit, and open-source recommender systems toolkit.
 * Copyright 2010-2014 Regents of the University of Minnesota and contributors
 * Work on LensKit has been funded by the National Science Foundation under
 * grants IIS 05-34939, 08-08692, 08-12148, and 10-17697.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the
 *   distribution.
 *
 * - Neither the name of the University of Minnesota nor the names of
 *   its contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This package provides build support for LensKit (e.g. custom JavaDoc
 * configuration).
 */

apply plugin: 'java'

def findToolsJar() {
    logger.info 'looking for tools.jar'
    def jdkHome = System.getenv('JAVA_HOME')
    if (jdkHome != null) {
        logger.info 'tools.jar: looking in {} (from $JAVA_HOME)', jdkHome
        File jar = file("$jdkHome/lib/tools.jar")
        if (jar.exists()) {
            logger.info 'found {}', jar
            return jar
        } else {
            logger.warn 'JAVA_HOME={} does not have tools.jar', jdkHome
        }
    }
    jdkHome = file(System.properties['java.home'] + '/..')
    logger.info 'tools.jar: looking in {} (from java.home)', jdkHome
    File jar = file("$jdkHome/lib/tools.jar")
    if (jar.exists()) {
        logger.info 'found {}', jar
        return jar
    } else {
        logger.warn 'java.home={} does not have tools.jar', jdkHome
    }
}

dependencies {
    def toolsJar = findToolsJar()
    if (toolsJar != null) {
        compile files(toolsJar)
    } else {
        logger.error 'could not find tools.jar'
    }
}

if (plugins.hasPlugin('license')) {
    license {
        header rootProject.file('etc/build-header.txt')
    }
}
